{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "083d35cd",
   "metadata": {},
   "source": [
    "## Programme"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2c3b3e48",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import ipywidgets as widgets\n",
    "from difflib import get_close_matches\n",
    "from random import randint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee447bdd",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#file definition\n",
    "file_past = \"df_hot_past.csv\"\n",
    "file_now = \"df_hot_current.csv\"\n",
    "file_spotify = \"results_clusters_15.csv\"\n",
    "\n",
    "#get dataset def to load\n",
    "def get_data_set(file): \n",
    "    df = pd.read_csv(file)\n",
    "    return pd.read_csv(file)\n",
    "\n",
    "#run the get_data_set to load the data files: \"df_spotify\" is the big spotify DB, \"df\" is the hotness check DB\n",
    "df_p = get_data_set(file_past)\n",
    "df_n = get_data_set(file_now)\n",
    "df_spotify = get_data_set(file_spotify)\n",
    "frames = [df_p, df_n]\n",
    "df = pd.concat(frames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "96ee777b",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [],
   "source": [
    "#clean data set: in \"df_spotify\" and \"df\" we lower cases for song title and clean it from special characters.\n",
    "df['song_title'] = df['song_title'].apply(lambda x: x.lower().translate({ord(c): \"\" for c in \"!?/[]|{}.:()'\\\"\"}))\n",
    "df_spotify['track_name'] = df_spotify['track_name'].apply(lambda x: x.lower().translate({ord(c): \"\" for c in \"!?/[]|{}.:()'\\\"\"}))\n",
    "df_spotify.rename(columns={df_spotify.columns[0]: \"id\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "03c8ead0",
   "metadata": {
    "slideshow": {
     "slide_type": "skip"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What's a badass song? wonder\n"
     ]
    }
   ],
   "source": [
    "def get_input(): \n",
    "    song_input = input(\"What's a badass song? \")\n",
    "    song_input = song_input.lower()\n",
    "    return song_input\n",
    "song_input = get_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0defac5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#len(song_check_spotify)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b37f9514",
   "metadata": {},
   "outputs": [],
   "source": [
    "#song_check_spotify = get_close_matches(song_input, df_spotify['track_name'], n=20, cutoff=0.99)\n",
    "if len(song_check_spotify) >0:\n",
    "    #spoti = df_spotify.query['track_name'==\"wonderwall\"]\n",
    "    spoti=df_spotify[(df_spotify['track_name'] ==song_input)]\n",
    "#else get_input()\n",
    "spoti[['id','artists', 'decades']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da6cf862",
   "metadata": {},
   "outputs": [],
   "source": [
    "if len(song_check_spotify) >1:\n",
    "    print('We found',len(song_check_spotify), 'songs.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9570fd19",
   "metadata": {},
   "outputs": [],
   "source": [
    "def song_exact_match():\n",
    "    #song_check_spotify = get_close_matches(song_input, df_spotify['track_name'], n=1, cutoff=0.99)\n",
    "    song_check0 = df_spotify[df_spotify['track_name'].str.contains(song_input)]\n",
    "    if len(song_check0) > 0:\n",
    "    print(\"true\")\n",
    "    break \n",
    "print(\"not in DB\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4c76c01",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "song_check0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11b6de5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "song_check0 = song_check0.head(1)\n",
    "type(song_check0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e676dbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "cluster=song_check0['Cluster'].values[0]\n",
    "cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58580df0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Here we filter our DB to the cluster that was taken from the input song from the user\n",
    "#We then run a randomizer to pick a song from that clustered DF\n",
    "df_cluster = df_spotify[(df_spotify[\"Cluster\"]==cluster)]\n",
    "df_cluster\n",
    "rand_line = randint(0, len(df_cluster)-1)\n",
    "rand_song = df_cluster.iloc[rand_line,12]\n",
    "rand_artist = df_cluster.iloc[rand_line,1]\n",
    "rand_year = df_cluster.iloc[rand_line,14]\n",
    "print('We recommend: '+rand_song+' from: '+rand_artist+' released in: +str(rand_year)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc7ebb2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "song_check1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b513bf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "song_check0 = df_spotify[df_spotify['track_name'].str.contains(song_input)]\n",
    "song_check1 = df[df['song_title'].str.contains(song_input)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ce6b94c",
   "metadata": {},
   "outputs": [],
   "source": [
    "if len(song_check1) > 0:\n",
    "            print('I found: ' + song_check1['song_title'].values[5]+' from '+song_check1['artist'].values[5])\n",
    "            num_rec = input('The song is HOT! How many recommendations would you like? Type a number from 1 to 10:')\n",
    "            for i in range(1,num_rec):\n",
    "                rand_line = randint(0, len(df)-1)\n",
    "                rand_song = df.iloc[rand_line,1]\n",
    "                rand_artist = df.iloc[rand_line,2]\n",
    "                rand_year = df.iloc[rand_line,3]\n",
    "                print('We recommend: '+rand_song+' from: '+rand_artist+' released in: '+str(rand_year))\n",
    "else:\n",
    "    print('cluster')\n",
    "    song_check0['cluster']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "089d56a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "def song_recommender():\n",
    "    song_check0 = df_spotify[df_spotify['track_name'].str.contains(song_input)]\n",
    "    song_check1 = df[df['song_title'].str.contains(song_input)]\n",
    "    \n",
    "    while len(song_check0) > 0: #check if exists in database\n",
    "\n",
    "        if len(song_check1) > 0:\n",
    "            print('I found: ' + song_check1['song_title'].values[0]+' from '+song_check1['artist'].values[0])\n",
    "            print('The song is HOT!')\n",
    "    \n",
    "    #rand_row = random.choice(range(len(df)))\n",
    "            #song = df.iloc[random_row, 2]\n",
    "            #artist = df.iloc[random_row, 3]\n",
    "            rand_line = randint(0, len(df)-1)\n",
    "            rand_song = df.iloc[rand_line,1]\n",
    "            rand_artist = df.iloc[rand_line,2]\n",
    "            rand_year = df.iloc[rand_line,3]\n",
    "            print('We recommend: '+rand_song+' from '+rand_artist+' released in '+rand_year)\n",
    "            #check cluster and recommend song from cluster\n",
    "        else:\n",
    "            song_check_spotify = get_close_matches(song_input, df_spotify['track_name'], n=1, cutoff=0.7)\n",
    " \n",
    "    #if, song does not exist, type in another song\n",
    "    else: \n",
    "        print(\"We're afraid, we couldn't find your song. Please try again\")\n",
    "        get_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0dac861",
   "metadata": {},
   "outputs": [],
   "source": [
    "song_check_spotify"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8682a9cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_artist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f149e97",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b73f8588",
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "544b504e",
   "metadata": {},
   "outputs": [],
   "source": [
    "song_check = get_close_matches(song_input, df_p['song_title'], n=1, cutoff=0.6)\n",
    "song_check1p = df_p[df_p['song_title'].str.contains(song_input)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2079359a",
   "metadata": {},
   "outputs": [],
   "source": [
    "len(song_check)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0169e802",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(song_check)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54fb78fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#How to check word in song title? \n",
    "#how to deal with typos \n",
    "##what if a song has the same name, but different artists?\n",
    "\n",
    "def duplicates():\n",
    "    if song exists >1:\n",
    "        print(\"There are several songs with this title. Which artist did you mean?\")\n",
    "        print(\"song_title\", \"artist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "816ec385",
   "metadata": {},
   "outputs": [],
   "source": [
    "duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "588f391e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def song_recommender():\n",
    "        while song in df_all[\"track_name\"]: #check if exists in database\n",
    "            \n",
    "            #if yes, check if song is hot \n",
    "            if song in df_hot_current[\"song_title\"]: \n",
    "                \n",
    "                #if yes, recommend another current hot song\n",
    "                print(\"Hot choice. Here's your song recommendation:\", df_hot_current.sample(n=1)) \n",
    "                \n",
    "                \n",
    "            #if no, check if song used to be hot\n",
    "            elif song in df_hot_past[\"song_title\"]:\n",
    "                \n",
    "                #if yes, recommend an old \"hot\" song\n",
    "                print(\"Hot choice. You like oldies, hey? Here's your song recommendation:\", df_hot_past.sample(n=1)) )\n",
    "            \n",
    "            #if no, recommend a similar song (k-means)\n",
    "            else:\n",
    "                check similarities (parameter 1, parameter 2, parameter 3)\n",
    "                print result\n",
    "        \n",
    "        #if, song does not exist, type in another song\n",
    "        else: \n",
    "            print(\"Sorry, we couldn't find your song. Try again\")\n",
    "            get_input()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae078a15",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Bringing it all together\n",
    "\n",
    "get_input()\n",
    "duplicates()\n",
    "\n",
    "while song is in df_all:\n",
    "    song_recommender()\n",
    "\n",
    "else: \n",
    "    #if, song does not exist, type in another song\n",
    "    print(\"Sorry, we couldn't find your song. Try again\")\n",
    "    get_input()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
